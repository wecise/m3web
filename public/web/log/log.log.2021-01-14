2021/01/14 07:31:51 [W] auth.go 103: Company name not found. Request /matrix/topological
2021/01/14 07:31:56 [W] auth.go 103: Company name not found. Request /matrix/topological
2021/01/14 09:44:17 [I] auth.go 217: hdim.admin login success for get session.
2021/01/14 09:44:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:44:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:45:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:48:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:48:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:48:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:48:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:48:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:48:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:53:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:54:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:54:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:54:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:54:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:54:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:54:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:58:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:58:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 09:58:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:35:33 [W] auth.go 103: Company name not found. Request /
2021/01/14 10:35:37 [W] auth.go 103: Company name not found. Request /
2021/01/14 10:44:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 10:44:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:49 [I] auth.go 133: hdim.admin login success. Redirect to uri: /
2021/01/14 11:25:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:49 [I] home.go 65: Go to user home page: /home
2021/01/14 11:25:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:25:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:26:51 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:26:51 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
      //  var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(rtn,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
2021/01/14 11:26:52 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:26:52 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:26:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:27:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:27:31 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:27:31 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(rtn,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
2021/01/14 11:27:31 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:27:31 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:27:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:27:33 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:27:33 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(rtn,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
2021/01/14 11:27:33 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:27:33 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:27:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:27:35 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:27:35 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(rtn,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
2021/01/14 11:27:35 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:27:35 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:27:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:27:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:27:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:27:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:28:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:28:12 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:28:12 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(rtn,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
2021/01/14 11:28:12 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:28:12 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:28:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:28:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:28:31 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:28:31 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(groupByClass,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
2021/01/14 11:28:31 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:28:31 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:28:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:28:33 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:28:33 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(groupByClass,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
2021/01/14 11:28:33 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:28:33 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:28:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:29:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:29:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:29:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:29:41 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:29:41 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(groupByClass,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
OUTPUT =sameGnHotelName()
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:29:41 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:29:41 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:29:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:29:49 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:29:49 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(groupByClass,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:29:49 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:29:49 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:29:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:30:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:30:17 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:30:17 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        _.forEach(groupByClass,function(v,k){
            
            var people = null;
            var hotel = null;
             var hotelcode = null;
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:30:17 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:30:17 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:30:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:31:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:31:17 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:31:17 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
          
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:31:17 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:31:17 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:31:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:17 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:32:17 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                     _.extend(rtn, { peopleName: people.name });
                     _.extend(rtn, { peopleCard: people.card }); 
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:32:17 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:32:17 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:32:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:32:18 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 11:33:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:33:14 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test_for_ui.js PUT
2021/01/14 11:33:14 [I] fs.go 56: Write data: //var input = decodeURIComponent(INPUT);
/*var input ='蒋三';*/

var idno ='320911198008184916';
var input2= odb.mql("SELECT name FROM  /matrix/entity/people where idno="+idno).data;
 input = _.filter(_.map(input2,'name'),null)[0];
var getTrainByPeople = (function(){
    var rtn = null;
    
    try{
        var tmp = odb.mql('match(:trainrecord) - [*1] -> ("people:'+input+'")  return id,name,serialnum,vtime').data[0].graph.Nodes; 
        rtn = _.filter(_.map(tmp,'serialnum'),null)[0];
    } catch(err){
        return [];
    }
    
    return rtn;
})();

var getHotelByPeople = (function(){
    var rtn = null;
    
    try{
        var tmp = odb.mql('match(:accommodation) - [*1] -> ("people:'+input+'")  return id,name,hotelname,vtime').data[0].graph.Nodes; 
        rtn = _.filter(_.map(tmp,'hotelname'),null)[0];
    } catch(err){
        return [];
    }
    
    return rtn;
})();

var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/train where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/people where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var sameTrain = function(){
    var rtn = {};
    
    try{
        var rt = odb.mql('match("train:'+getTrainByPeople+'") <- [*1] - (:trainrecord ) - [*1] -> (:people) '); 
        
        // 按class分组
        var groupByClass = _.groupBy(rt.data[0].graph.Nodes,'class');
        
        _.forEach(groupByClass,function(v,k){
            
            var people = null;
            var train = null;
            
            if(k == '/matrix/entity/train'){
                _.forEach(v,function(val){
                    train = getTrainInfo(val.id);
                    _.extend(rtn, { trainName: train.name });
                })
            } else if (k == '/matrix/entity/people'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var p = {};
                    p[people.name]=people;
                    _.extend(rtn, p);
                })
            }
            
        })
        
        
    } catch(err){
        return null;
    }
    
    return rtn;
}

var sameHotel = function(){
    var rtn = null;
    
    try{
        rtn = odb.mql('match("hotel:'+getHotelByPeople+'") <- [*1] - (:accommodation ) - [*1] -> (:people) return age,address,birthday'); 
    } catch(err){
        return [];
    }
    
    return rtn;
}


OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameTrain()
    }
}
2021/01/14 11:33:14 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test_for_ui.js
2021/01/14 11:33:14 [I] fs.go 77: Write attr: {"remark":"","ctime":1610519247513,"author":"admin"}
2021/01/14 11:33:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:33:16 [W] query_util.go 869: can't find class for id[hotel:广西锦江之星市区店] , search subdix of class!
2021/01/14 11:33:16 [W] query_util.go 869: can't find class for id[hotel:盐城锦江之星市区店] , search subdix of class!
2021/01/14 11:33:16 [W] query_util.go 869: can't find class for id[hotel:盐城锦江之星市区店] , search subdix of class!
2021/01/14 11:33:16 [W] query_util.go 869: can't find class for id[hotel:广西锦江之星市区店] , search subdix of class!
2021/01/14 11:33:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:33:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:34:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:34:01 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:34:01 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    p[people.name]=people;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:34:01 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:34:01 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:34:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:34:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:34:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:34:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:34:37 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:34:37 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:34:38 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:34:38 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:34:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:34:39 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 11:36:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:09 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:36:09 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.id;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:36:09 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:36:09 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:36:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:36:12 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:28 [I] home.go 65: Go to user home page: /home
2021/01/14 11:37:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:37:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:38:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:38:13 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:38:13 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card.."-"..people.name;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:38:13 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:38:13 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:38:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:38:28 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:38:28 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card+"-"+people.name;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:38:28 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:38:28 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:38:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:38:31 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 11:38:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:38:57 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:38:57 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[perbasisinfo]=people.card+"-"+people.name;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:38:57 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:38:57 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:39:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:39:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:39:11 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:39:11 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p["perbasisinfo"]=people.card+"-"+people.name;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:39:11 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:39:11 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:39:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:39:13 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 11:39:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:39:50 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:39:50 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p["perbasisinfo"+index]=people.card+"-"+people.name;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:39:50 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:39:50 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:39:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:39:52 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 11:40:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:40:29 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 11:40:29 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 11:40:29 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 11:40:29 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 11:40:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 11:40:40 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 11:59:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:21:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:22:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:22:03 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 12:22:03 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }else{
                 var p = {};
                    _.extend(rtn, p);
            }
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 12:22:03 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 12:22:03 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 12:22:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:22:06 [I] wjs.go 145: /bizApi/hdim/test.js:80:21:  =======
2021/01/14 12:51:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:43 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 12:51:43 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "txtx",
    "data": {
            "tx": sameGnHotelName() 
    }
}
2021/01/14 12:51:43 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 12:51:43 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 12:51:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:51:59 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 12:51:59 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    log.info("=======");
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 12:51:59 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 12:51:59 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 12:52:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 12:52:26 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 12:52:26 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtn, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtn, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtn, p);
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtn;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 12:52:26 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 12:52:26 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:58 [I] auth.go 133: hdim.admin login success. Redirect to uri: /
2021/01/14 15:39:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:58 [I] home.go 65: Go to user home page: /home
2021/01/14 15:39:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:39:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:40:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:41:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:41:01 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:41:01 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
          var people = null;
            var hotel = null;
             var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtnMes, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id);
                    var p = {};
                     _.extend(rtn, { hotelrecordName: hotelcode.name }); 
                    _.extend(rtnMes, p);
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:41:01 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:41:01 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:41:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:45:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:45:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:45:58 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:45:58 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{
       // log.log("========================="+id);
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
// 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtnMes, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:45:58 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:45:58 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:46:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:46:13 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:46:13 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtnMes, p);
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:46:13 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:46:13 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:46:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:47:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:47:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:47:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:47:06 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:47:06 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtnMes, { hotelrecordName:p });
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:47:06 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:47:06 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:47:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:47:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:47:27 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:47:27 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card;
                    _.extend(rtnMes, { perbasisinfo:p });
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:47:27 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:47:27 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:47:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:48:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:48:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:48:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:48:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:48:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:48:30 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:48:30 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[people.name]=people.card+"-"+people.name;
                    _.extend(rtnMes, { perbasisinfo:p });
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:48:30 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:48:30 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:48:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:48:41 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:48:41 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[index]=people.card+"-"+people.name;
                    _.extend(rtnMes, { perbasisinfo:p });
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:48:41 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:48:41 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:50:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:50:31 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:50:31 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                     var p = {};
                    p[index]=people.card+"-"+people.name;
                    _.extend(rtnMes, { perbasisinfo:p });
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:50:31 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:50:31 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:50:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:52:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:52:15 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:52:15 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
               var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                    _.extend(rtnMes, { perbasisinfo:p });
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:52:16 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:52:16 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:52:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:52:21 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:52:21 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                    _.extend(rtnMes, { perbasisinfo:p });
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:52:21 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:52:21 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:52:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:52:42 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:52:42 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
             _.extend(rtnMes, { perbasisinfo:p });
            
        })
         
        } catch(err){
            return err;
        }
        
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:52:42 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:52:42 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:52:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:52:53 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:52:53 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:52:53 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:52:53 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:53:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:53:58 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:53:58 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:53:58 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:53:58 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:54:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:58:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:58:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:58:48 [I] fs.go 38: Write file (js) /script/bizApi/hdim/test.js PUT
2021/01/14 15:58:48 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 15:58:48 [I] dfs_index.go 152: Index file /script/bizApi/hdim/test.js
2021/01/14 15:58:48 [I] fs.go 77: Write attr: {"remark":"","ctime":1610545309673,"author":"admin"}
2021/01/14 15:58:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:58:52 [I] fs.go 38: Write file (dir) /script/bizApi/hdim/新文件夹_1610611482767 PUT
2021/01/14 15:58:52 [I] fs.go 77: Write attr: {"remark":"","ctime":1610611482767,"author":"admin"}
2021/01/14 15:58:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:59:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 15:59:53 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 15:59:53 [I] fs.go 56: Write data: null
2021/01/14 15:59:54 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 15:59:54 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 15:59:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:00:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:00:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:00:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:00:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:00:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:00:20 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:00:20 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:00:20 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:00:20 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:00:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:01:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:01:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:01:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:01:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:25 [I] modb.go 723: Export class /matrix/action/hotelrecord
2021/01/14 16:02:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:02:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:03:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:03:28 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:03:28 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress }); 
                    _.extend(rtnMes, { starttimes: hotel.starttimes }); 
                    _.extend(rtnMes, { roomno: hotel.roomno }); 
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:03:28 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:03:28 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:03:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:04:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:04:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:04:56 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:04:56 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                         _.extend(rtnMes, { starttimes: hotel.starttimes }); 
                    _.extend(rtnMes, { roomno: hotel.roomno }); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:04:56 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:04:56 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:05:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:05:02 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:05:02 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name });  
                     _.extend(rtnMes, { starttimes: hotel.starttimes }); 
                     _.extend(rtnMes, { roomno: hotel.roomno }); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:05:02 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:05:02 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:05:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:05:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:05:32 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:05:32 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name});  
                     _.extend(rtnMes, { starttimes: hotel.starttimes}); 
                     _.extend(rtnMes, { roomno: hotel.roomno}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:05:32 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:05:32 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:05:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:05:44 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:05:44 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name});  
                     _.extend(rtnMes, { starttimes: hotelcode.starttimes}); 
                     _.extend(rtnMes, { roomno: hotelcode.roomno}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:05:44 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:05:44 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:05:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:07:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:07:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:07:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:08:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:08:19 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:08:19 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name});  
                     _.extend(rtnMes, { starttimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = {
    "type": "tz",
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:08:19 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:08:19 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:08:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:09:58 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:09:58 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladd: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelrecordName: hotelcode.name});  
                     _.extend(rtnMes, { starttimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:09:58 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:09:58 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:10:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:10:59 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:10:59 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hoteintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:10:59 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:10:59 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:11:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:21 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:11:21 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo   where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:11:22 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:11:22 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:11:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:50 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:11:50 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:11:50 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:11:50 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:11:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:11:52 [W] query_util.go 869: can't find class for id[hotel:] , search subdix of class!
2021/01/14 16:12:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:12:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:13:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:13:23 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:13:23 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:13:23 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:13:23 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:16:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:16:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:16:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:16:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:16:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:16:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:16:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:16:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:23:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:23:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:23:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:23:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:23:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:25:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:26:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:27:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:27:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:27:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:27:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:27:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:28:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:28:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:28:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:28:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:29:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:29:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:29:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:29:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:29:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:30:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:31:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:32:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:47:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:47:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:47:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:48:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:48:16 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:48:16 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[index]=people.card+"-"+people.name+"-"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:48:16 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:48:16 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:48:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:49:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:49:23 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:49:23 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]=+"card:"+people.card+"types:"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:49:23 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:49:23 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:49:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:49:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:49:37 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:49:37 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]=+"card:"+people.card+",type:"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:49:37 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:49:37 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:49:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:49:50 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:49:50 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]=+"card:"+people.card+",type:"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:49:50 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:49:50 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:55:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:55:36 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:55:36 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]=+"cardid:"+people.card+",type:"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:55:36 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:55:36 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:55:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:57:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:57:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:57:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 16:57:22 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 16:57:22 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]="cardid:"+people.card+",type:"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 16:57:22 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 16:57:22 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 16:57:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:54 [I] auth.go 133: hdim.admin login success. Redirect to uri: /
2021/01/14 17:01:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:54 [I] home.go 65: Go to user home page: /home
2021/01/14 17:01:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:01:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:02:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:03:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:03:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:03:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:03:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:03:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:03:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:07:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:08:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:09:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:11:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:11:26 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:11:26 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]=people;
                    _.extend(rtn, p);
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        // _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:11:26 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:11:26 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:11:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:11:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:11:38 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:11:38 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]=people;
                    _.extend(rtnMes, p);
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
        // _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:11:38 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:11:38 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:11:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:12:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:12:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:14:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:16:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:16:33 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:16:33 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]="card:"+people.card+"type:"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:16:33 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:16:33 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:16:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:17:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:17:19 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:17:19 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p[people.name]="card:"+people.card+",type:"+people.types;
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:17:19 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:17:19 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:17:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:19:41 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:19:41 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["name:"+people.name+"card:"+people.card+",type:"+people.types]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:19:41 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:19:41 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:19:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:08 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:21:08 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{name:"+people.name+"card:"+people.card+",type:"+people.types]+"}"="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:21:08 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:21:08 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:21:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:28 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:21:28 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{name:"+people.name+"card:"+people.card+",type:"+people.types]+""="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:21:29 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:21:29 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:21:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:35 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:21:35 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["name:"+people.name+"card:"+people.card+",type:"+people.types]+""="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:21:35 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:21:35 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:21:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:21:54 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:21:54 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{name:"+people.name+"card:"+people.card+",type:"+people.types+"}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:21:54 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:21:54 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:21:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:10 [W] auth.go 103: Company name not found. Request /
2021/01/14 17:22:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:24 [I] auth.go 133: hdim.admin login success. Redirect to uri: /
2021/01/14 17:22:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:25 [I] home.go 65: Go to user home page: /home
2021/01/14 17:22:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:29 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:22:29 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{name:"+people.name+",card:"+people.card+",type:"+people.types+"}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:22:29 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:22:29 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:22:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:22:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:23:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:26:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:39 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:34:39 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{name:'"+people.name+"',card:'"+people.card+"',type:'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:34:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:39 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:34:39 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:34:40 [E] batch.go 73: cql =[INSERT INTO object JSON ? DEFAULT UNSET], params=[[{"_tokens":{"_fields":"\u0000getWebWarn_tx.js\u00002021-01-14 07:59:53\u00002021-01-14 09:34:39\u0000js\u0000/script/bizApi/hdim/getWebWarn_tx.js\u0000{\"remark\":\"查询出预警的同行信息\",\"ctime\":1610611544075,\"author\":\"admin\"}\u0000/matrix/filesystem\u00002021-01-14\u0000/script/bizApi/hdim\u0000admin\u00002749395784853370647\u00000\u00001610616880761","_raw":""},"class":"/matrix/filesystem","day":"2021-01-14","id":"2749395784853370647","list_bigint_0":[6424957028413017542],"list_bigint_1":[],"map_varchar_set_0":null,"map_varchar_set_1":null,"map_varchar_set_10":null,"map_varchar_set_11":null,"map_varchar_set_12":null,"map_varchar_set_13":null,"map_varchar_set_14":null,"map_varchar_set_15":null,"map_varchar_set_16":null,"map_varchar_set_19":null,"map_varchar_set_2":null,"map_varchar_set_20":null,"map_varchar_set_21":null,"map_varchar_set_22":null,"map_varchar_set_23":null,"map_varchar_set_24":null,"map_varchar_set_25":null,"map_varchar_set_3":null,"map_varchar_set_4":null,"map_varchar_set_5":null,"map_varchar_set_6":null,"map_varchar_set_7":null,"map_varchar_set_8":null,"map_varchar_set_9":null,"name":"getWebWarn_tx.js","smallint_0":0,"tags":[],"timestamp_2":"2021-01-14T09:34:39.4Z","timestamp_3":"2021-01-14T07:59:53.976Z","varchar_19":"/script/bizApi/hdim","varchar_2":"admin","varchar_20":"/script/bizApi/hdim/getWebWarn_tx.js","varchar_33":"js","varchar_34":"{\"remark\":\"查询出预警的同行信息\",\"ctime\":1610611544075,\"author\":\"admin\"}","varchar_394":null,"varchar_396":null,"vtime":1610616880761}]], err=[Error decoding JSON value for timestamp_2: Unable to coerce '2021-01-14T09:34:39.4Z' to a formatted date (long)]
2021/01/14 17:34:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:34:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:35:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:35:01 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:35:01 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{name:'"+people.name+"',card:'"+people.card+"',type:'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:35:01 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:35:01 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:35:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:35:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:35:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:35:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:05 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:36:05 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:36:06 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:36:06 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:36:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:16 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:36:16 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = {};
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                  
                    p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:36:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:17 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:36:17 [I] fs.go 77: Write attr: {"remark":"查询出预警的同行信息","ctime":1610611544075,"author":"admin"}
2021/01/14 17:36:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:36:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:38:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:39:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:08 [I] auth.go 217: hdim.admin login success for get session.
2021/01/14 17:45:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:45:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:46:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:47:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:48:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:49:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:50:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:52:30 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:52:30 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    p.push(people);
                    //p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:52:30 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:52:30 [I] fs.go 77: Write attr: {}
2021/01/14 17:52:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:49 [I] fs.go 38: Write file (js) /script/bizApi/hdim/te.js PUT
2021/01/14 17:53:49 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={}; 
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                   p.push('name':+people.name);
                    p.push('card':+people.card);
                     p.push('type':+people.types);
                    p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:53:49 [I] dfs_index.go 152: Index file /script/bizApi/hdim/te.js
2021/01/14 17:53:49 [I] fs.go 77: Write attr: {"remark":"","ctime":1607333412968,"author":"admin"}
2021/01/14 17:53:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:53:56 [I] fs.go 38: Write file (js) /script/bizApi/hdim/te.js PUT
2021/01/14 17:53:56 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={}; 
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                   p.push('name':+people.name);
                    p.push('card':+people.card);
                     p.push('type':+people.types); 
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:53:56 [I] dfs_index.go 152: Index file /script/bizApi/hdim/te.js
2021/01/14 17:53:56 [I] fs.go 77: Write attr: {"remark":"","ctime":1607333412968,"author":"admin"}
2021/01/14 17:54:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:54:02 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:54:02 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var people1 = {'name':people.name,'card':people.card,'type':people.types};
                    
                    p.push(people1);
                    //p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:54:02 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:54:02 [I] fs.go 77: Write attr: {}
2021/01/14 17:54:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:54:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:54:05 [I] fs.go 38: Write file (js) /script/bizApi/hdim/te.js PUT
2021/01/14 17:54:05 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={}; 
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    p.push('name':+people.name);
                    p.push('card':+people.card);
                    p.push('type':+people.types); 
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:54:05 [I] dfs_index.go 152: Index file /script/bizApi/hdim/te.js
2021/01/14 17:54:05 [I] fs.go 77: Write attr: {"remark":"","ctime":1607333412968,"author":"admin"}
2021/01/14 17:54:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:54:14 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:54:14 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var people1 = {'name':people.name,'card':people.card,'type':people.types};
                    
                    p.push(people1);
                    //p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:54:14 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:54:14 [I] fs.go 77: Write attr: {}
2021/01/14 17:54:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:54:17 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:54:17 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
         //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var people1 = {'name':people.name,'card':people.card,'type':people.types};
                    
                    p.push(people1);
                    //p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:54:17 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:54:17 [I] fs.go 77: Write attr: {}
2021/01/14 17:54:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:55:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:55:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:57:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:57:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:59:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:59:29 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 17:59:29 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
  //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
            var people = null;
            var hotel = null;
            var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var people1 = {'name':people.name,'card':people.card,'type':people.types};
                    
                    p.push(people1);
                    //p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 17:59:29 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 17:59:29 [I] fs.go 77: Write attr: {}
2021/01/14 17:59:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:59:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 17:59:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:01 [I] fs.go 38: Write file (js) /script/bizApi/hdim/getWebWarn_tx.js PUT
2021/01/14 18:00:01 [I] fs.go 56: Write data:      var rt=[]; 
     var rtn = null;
     var sameGnHotelName=null;
     var rtnArr=[];
     var poples = odb.mql("SELECT card,name FROM /matrix/entity/perbasisinfo where id ='perbasisinfo:320911198912260630' ").data;
     
     //此处获取危险地区数据
    var areas = odb.mql("SELECT area FROM /matrix/entity/riskarea").data;
    //解析危险地区
    var allAreas = _.map(areas,'area').join(","); 
   
   
     //此处开始循环遍历所得到的所有
     _.forEach(poples,function(n,key) {
         rt.push(poples[key].card+"=="+poples[key].name);
        //1.获取公安指定人员住宿的相关旅馆名称
       var getGnHotelName = (function(){
        var rtn = null;
        
        try{
            var mqlStr = 'match(:/matrix/entity/hotel) - [*1] -> ("perbasisinfo:'+poples[key].card+'")  return hoteladdress';
           
            var tmp = odb.mql(mqlStr).data[0].graph.Nodes; 
            rtn = _.filter(_.map(tmp,'hoteladdress'),null)[0];
        } catch(err){
            return [];
        }
        
        return rtn;
     })(); 
         
         
 var getTrainInfo = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/entity/hotel where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var getPeopleInfo = function(id){
    var rtn = null;
    try{ 
        rtn = odb.mql("select * from /matrix/entity/perbasisinfo where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

var gethotelrecord = function(id){
    var rtn = null;
    try{
        rtn = odb.mql("select * from /matrix/action/hotelrecord where id='"+ id +"'").data[0];
    } catch(err){
        rtn = null;
    }
    return rtn;
};

         
  //1.获取公安指定人员同住宿
   sameGnHotelName= function(){
        try{ 
            var rtnMes={};
            var p = [];
            rtn = odb.mql('match("hotel:'+getGnHotelName+'") <- [*1] - (:/matrix/action/hotelrecord ) - [*1] -> (:perbasisinfo) return card,name,residential_address,birthdate'); 
            
         // 按class分组
        var groupByClass = _.groupBy(rtn.data[0].graph.Nodes,'class');
        
        var people = null;
        var hotel = null;
        var hotelcode = null;
        _.forEach(groupByClass,function(v,k){
            
            if(k == '/matrix/entity/hotel'){
                _.forEach(v,function(val){
                    hotel = getTrainInfo(val.id);
                    _.extend(rtnMes, { hoteladdress: hotel.hoteladdress });  
                })
            } else if (k == '/matrix/entity/perbasisinfo'){
                _.forEach(v,function(val,index){
                    people = getPeopleInfo(val.id);
                    var people1 = {'name':people.name,'card':people.card,'type':people.types};
                    
                    p.push(people1);
                    //p["{'name':'"+people.name+"','card':'"+people.card+"','type':'"+people.types+"'}"]="";
                   
                })
            }
            else if (k == '/matrix/action/hotelrecord'){
                _.forEach(v,function(val,index){
                    hotelcode = gethotelrecord(val.id); 
                     _.extend(rtnMes, { hotelName: hotelcode.name});  
                     _.extend(rtnMes, { hotelintimes: hotelcode.starttimes}); 
                })
            }
            
            
        })
         
        } catch(err){
            return err;
        }
         _.extend(rtnMes, { perbasisinfo:p });
        return rtnMes;
      }
 })//循环遍历人员结束
     
 
OUTPUT = { 
    "data": {
            "tz": sameGnHotelName() 
    }
}
2021/01/14 18:00:01 [I] dfs_index.go 152: Index file /script/bizApi/hdim/getWebWarn_tx.js
2021/01/14 18:00:01 [I] fs.go 77: Write attr: {}
2021/01/14 18:00:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:00:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:01:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:29 [I] fs.go 333: Copy file /home/admin/etc to /home/huidutech POST
2021/01/14 18:02:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:29 [I] fs.go 333: Copy file /home/admin/Documents/template to /home/huidutech/Documents POST
2021/01/14 18:02:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:35 [I] fs.go 333: Copy file /home/admin/Documents/history to /home/huidutech/Documents POST
2021/01/14 18:02:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:02:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:03:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:19:17:  update /matrix/portal/tools set _group = _group + {"list":["/涉羟前台"]} where id = '10594627790554772188'
2021/01/14 18:04:16 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:29:13:  update /matrix/group set sapp = sapp + {"10594627790554772188":"[\"list\"]"} where id in ('1334453468253574170')
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:37 [I] auth.go 133: hdim.huidutech login success. Redirect to uri: /
2021/01/14 18:04:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:37 [I] home.go 65: Go to user home page: /home
2021/01/14 18:04:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:04:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [I] auth.go 133: hdim.admin login success. Redirect to uri: /
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [I] home.go 65: Go to user home page: /home
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:05:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:06:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:29 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"add":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:29 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"delete":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:29 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"edit":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:29 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"list":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:29 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"add":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:29 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"delete":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"edit":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"list":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"add":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"delete":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"edit":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"list":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"add":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"delete":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"edit":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"list":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobgroup set _group = _group - {"add":["/用户组/testuser"]} where id != null;
2021/01/14 18:07:30 [E] wjs.go 149: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:22:9:  map[message:[NotExist]: class : /matrix/jobs/jobgroup not find !
"[NotExist]" backtrace:
git.wecise.com/wecise/platform/odb.(*MqlSemantics).FullClass:mql.go:1059
git.wecise.com/wecise/platform/odb.(*MqlParser).CypherClass:MqlParser.go:854
git.wecise.com/wecise/platform/odb.(*MqlParser).UpdateStatement_0:MqlParser.go:1373
git.wecise.com/wecise/platform/odb.(*MqlParser).UpdateStatement:MqlParser.go:1358
git.wecise.com/wecise/platform/odb.(*MqlParser).Statement_7:MqlParser.go:167
git.wecise.com/wecise/platform/odb.(*MqlParser).Statement:MqlParser.go:79
git.wecise.com/wecise/platform/odb.(*MqlParser).Parse:MqlParser.go:40
git.wecise.com/wecise/platform/odb.(*Gutil).Parse:query.go:191
git.wecise.com/wecise/platform/odb.(*Gutil).queryCore:query.go:236
git.wecise.com/wecise/platform/odb.(*Gutil).Query:query.go:95
git.wecise.com/wecise/platform/odb.(*Gutil).jsFuncMQL:js_odb.go:155
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:201
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeForStatement:cmpl_evaluate_statement.go:263
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:68
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeIfStatement:cmpl_evaluate_statement.go:292
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:71
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeForStatement:cmpl_evaluate_statement.go:263
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:68
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeIfStatement:cmpl_evaluate_statement.go:292
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:71
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeTryStatement.func1:cmpl_evaluate_statement.go:344
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).tryCatchEvaluate:runtime.go:142
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeTryStatement:cmpl_evaluate_statement.go:343
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:98
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeAssignExpression:cmpl_evaluate_expression.go:124
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:31
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeProgram:cmpl_evaluate.go:17
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_runOrEval.func1:runtime.go:767
git.wecise.com/wecise/platform/lib/robertkrimen/otto.catchPanic:error.go:252
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_runOrEval:runtime.go:766
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_run:runtime.go:779
git.wecise.com/wecise/platform/lib/robertkrimen/otto.Otto.Run:otto.go:295
git.wecise.com/wecise/platform/web/routers/script.ExecJS:script.go:132
reflect.Value.call:value.go:479
reflect.Value.Call:value.go:337
github.com/go-macaron/inject.(*injector).callInvoke:inject.go:177
github.com/go-macaron/inject.(*injector).Invoke:inject.go:137
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/web/modules/middleware.AppAuth.func1:auth.go:194
git.wecise.com/wecise/platform/web/modules/middleware.AppAuth.func1:auth.go:194
reflect.Value.call:value.go:479
reflect.Value.Call:value.go:337
github.com/go-macaron/inject.(*injector).callInvoke:inject.go:177
github.com/go-macaron/inject.(*injector).Invoke:inject.go:137
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/lib/go-macaron/session.Sessioner.func1:session.go:188
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
gopkg.in/macaron%2ev1.Recovery.func1:recovery.go:162
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.LoggerInvoker.Invoke:logger.go:41
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/lib/go-macaron/gzip.Gziper.func1:gzip.go:99
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/web/cmd.newMacaron.func1:web.go:115
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
gopkg.in/macaron%2ev1.(*Router).Handle.func1:router.go:188
gopkg.in/macaron%2ev1.(*Router).ServeHTTP:router.go:295
gopkg.in/macaron%2ev1.(*Macaron).ServeHTTP:macaron.go:221
net/http.serverHandler.ServeHTTP:server.go:2844
net/http.(*conn).serve:server.go:1926
runtime.goexit:asm_amd64.s:1375 name:GoError:/matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:17:17]
2021/01/14 18:07:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:33 [I] fs.go 207: Delete file /home/test01 DELETE
2021/01/14 18:07:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"add":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"delete":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"edit":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"list":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"add":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"delete":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"edit":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"list":["/test01"]} where id != null;
2021/01/14 18:07:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"add":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"delete":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"edit":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"list":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"add":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"delete":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"edit":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"list":["/test01"]} where id != null;
2021/01/14 18:07:34 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobgroup set _group = _group - {"add":["/test01"]} where id != null;
2021/01/14 18:07:34 [E] wjs.go 149: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:22:9:  map[message:[NotExist]: class : /matrix/jobs/jobgroup not find !
"[NotExist]" backtrace:
git.wecise.com/wecise/platform/odb.(*MqlSemantics).FullClass:mql.go:1059
git.wecise.com/wecise/platform/odb.(*MqlParser).CypherClass:MqlParser.go:854
git.wecise.com/wecise/platform/odb.(*MqlParser).UpdateStatement_0:MqlParser.go:1373
git.wecise.com/wecise/platform/odb.(*MqlParser).UpdateStatement:MqlParser.go:1358
git.wecise.com/wecise/platform/odb.(*MqlParser).Statement_7:MqlParser.go:167
git.wecise.com/wecise/platform/odb.(*MqlParser).Statement:MqlParser.go:79
git.wecise.com/wecise/platform/odb.(*MqlParser).Parse:MqlParser.go:40
git.wecise.com/wecise/platform/odb.(*Gutil).Parse:query.go:191
git.wecise.com/wecise/platform/odb.(*Gutil).queryCore:query.go:236
git.wecise.com/wecise/platform/odb.(*Gutil).Query:query.go:95
git.wecise.com/wecise/platform/odb.(*Gutil).jsFuncMQL:js_odb.go:155
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:201
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeForStatement:cmpl_evaluate_statement.go:263
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:68
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeIfStatement:cmpl_evaluate_statement.go:292
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:71
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeForStatement:cmpl_evaluate_statement.go:263
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:68
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeIfStatement:cmpl_evaluate_statement.go:292
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:71
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeTryStatement.func1:cmpl_evaluate_statement.go:344
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).tryCatchEvaluate:runtime.go:142
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeTryStatement:cmpl_evaluate_statement.go:343
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:98
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeAssignExpression:cmpl_evaluate_expression.go:124
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:31
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeProgram:cmpl_evaluate.go:17
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_runOrEval.func1:runtime.go:767
git.wecise.com/wecise/platform/lib/robertkrimen/otto.catchPanic:error.go:252
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_runOrEval:runtime.go:766
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_run:runtime.go:779
git.wecise.com/wecise/platform/lib/robertkrimen/otto.Otto.Run:otto.go:295
git.wecise.com/wecise/platform/web/routers/script.ExecJS:script.go:132
reflect.Value.call:value.go:479
reflect.Value.Call:value.go:337
github.com/go-macaron/inject.(*injector).callInvoke:inject.go:177
github.com/go-macaron/inject.(*injector).Invoke:inject.go:137
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/web/modules/middleware.AppAuth.func1:auth.go:194
git.wecise.com/wecise/platform/web/modules/middleware.AppAuth.func1:auth.go:194
reflect.Value.call:value.go:479
reflect.Value.Call:value.go:337
github.com/go-macaron/inject.(*injector).callInvoke:inject.go:177
github.com/go-macaron/inject.(*injector).Invoke:inject.go:137
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/lib/go-macaron/session.Sessioner.func1:session.go:188
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
gopkg.in/macaron%2ev1.Recovery.func1:recovery.go:162
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.LoggerInvoker.Invoke:logger.go:41
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/lib/go-macaron/gzip.Gziper.func1:gzip.go:99
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/web/cmd.newMacaron.func1:web.go:115
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
gopkg.in/macaron%2ev1.(*Router).Handle.func1:router.go:188
gopkg.in/macaron%2ev1.(*Router).ServeHTTP:router.go:295
gopkg.in/macaron%2ev1.(*Macaron).ServeHTTP:macaron.go:221
net/http.serverHandler.ServeHTTP:server.go:2844
net/http.(*conn).serve:server.go:1926
runtime.goexit:asm_amd64.s:1375 name:GoError:/matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:17:17]
2021/01/14 18:07:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:07:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:53 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"add":["/test"]} where id != null;
2021/01/14 18:08:53 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"delete":["/test"]} where id != null;
2021/01/14 18:08:53 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"edit":["/test"]} where id != null;
2021/01/14 18:08:53 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/perms/api set _group = _group - {"list":["/test"]} where id != null;
2021/01/14 18:08:53 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"add":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"delete":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"edit":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/portal/tools set _group = _group - {"list":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"add":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"delete":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"edit":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/tagdir set _group = _group - {"list":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"add":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"delete":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"edit":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobdef set _group = _group - {"list":["/test"]} where id != null;
2021/01/14 18:08:54 [I] wjs.go 145: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:16:17:  update /matrix/jobs/jobgroup set _group = _group - {"add":["/test"]} where id != null;
2021/01/14 18:08:54 [E] wjs.go 149: /matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:22:9:  map[message:[NotExist]: class : /matrix/jobs/jobgroup not find !
"[NotExist]" backtrace:
git.wecise.com/wecise/platform/odb.(*MqlSemantics).FullClass:mql.go:1059
git.wecise.com/wecise/platform/odb.(*MqlParser).CypherClass:MqlParser.go:854
git.wecise.com/wecise/platform/odb.(*MqlParser).UpdateStatement_0:MqlParser.go:1373
git.wecise.com/wecise/platform/odb.(*MqlParser).UpdateStatement:MqlParser.go:1358
git.wecise.com/wecise/platform/odb.(*MqlParser).Statement_7:MqlParser.go:167
git.wecise.com/wecise/platform/odb.(*MqlParser).Statement:MqlParser.go:79
git.wecise.com/wecise/platform/odb.(*MqlParser).Parse:MqlParser.go:40
git.wecise.com/wecise/platform/odb.(*Gutil).Parse:query.go:191
git.wecise.com/wecise/platform/odb.(*Gutil).queryCore:query.go:236
git.wecise.com/wecise/platform/odb.(*Gutil).Query:query.go:95
git.wecise.com/wecise/platform/odb.(*Gutil).jsFuncMQL:js_odb.go:155
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:201
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeForStatement:cmpl_evaluate_statement.go:263
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:68
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeIfStatement:cmpl_evaluate_statement.go:292
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:71
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeForStatement:cmpl_evaluate_statement.go:263
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:68
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeIfStatement:cmpl_evaluate_statement.go:292
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:71
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeTryStatement.func1:cmpl_evaluate_statement.go:344
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).tryCatchEvaluate:runtime.go:142
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeTryStatement:cmpl_evaluate_statement.go:343
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:98
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:30
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_call_nodeFunction:cmpl_evaluate.go:61
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_object).call:type_function.go:226
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeCallExpression:cmpl_evaluate_expression.go:244
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:44
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeAssignExpression:cmpl_evaluate_expression.go:124
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeExpression:cmpl_evaluate_expression.go:31
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatement:cmpl_evaluate_statement.go:62
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeStatementList:cmpl_evaluate_statement.go:121
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_evaluate_nodeProgram:cmpl_evaluate.go:17
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_runOrEval.func1:runtime.go:767
git.wecise.com/wecise/platform/lib/robertkrimen/otto.catchPanic:error.go:252
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_runOrEval:runtime.go:766
git.wecise.com/wecise/platform/lib/robertkrimen/otto.(*_runtime).cmpl_run:runtime.go:779
git.wecise.com/wecise/platform/lib/robertkrimen/otto.Otto.Run:otto.go:295
git.wecise.com/wecise/platform/web/routers/script.ExecJS:script.go:132
reflect.Value.call:value.go:479
reflect.Value.Call:value.go:337
github.com/go-macaron/inject.(*injector).callInvoke:inject.go:177
github.com/go-macaron/inject.(*injector).Invoke:inject.go:137
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/web/modules/middleware.AppAuth.func1:auth.go:194
git.wecise.com/wecise/platform/web/modules/middleware.AppAuth.func1:auth.go:194
reflect.Value.call:value.go:479
reflect.Value.Call:value.go:337
github.com/go-macaron/inject.(*injector).callInvoke:inject.go:177
github.com/go-macaron/inject.(*injector).Invoke:inject.go:137
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/lib/go-macaron/session.Sessioner.func1:session.go:188
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
gopkg.in/macaron%2ev1.Recovery.func1:recovery.go:162
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.LoggerInvoker.Invoke:logger.go:41
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/lib/go-macaron/gzip.Gziper.func1:gzip.go:99
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
git.wecise.com/wecise/platform/web/cmd.newMacaron.func1:web.go:115
gopkg.in/macaron%2ev1.(*Context).Next:context.go:111
gopkg.in/macaron%2ev1.ContextInvoker.Invoke:context.go:80
github.com/go-macaron/inject.(*injector).fastInvoke:inject.go:157
github.com/go-macaron/inject.(*injector).Invoke:inject.go:135
gopkg.in/macaron%2ev1.(*Context).run:context.go:121
gopkg.in/macaron%2ev1.(*Router).Handle.func1:router.go:188
gopkg.in/macaron%2ev1.(*Router).ServeHTTP:router.go:295
gopkg.in/macaron%2ev1.(*Macaron).ServeHTTP:macaron.go:221
net/http.serverHandler.ServeHTTP:server.go:2844
net/http.(*conn).serve:server.go:1926
runtime.goexit:asm_amd64.s:1375 name:GoError:/matrix/system/clearRoleGroupInstAfterDeleteRoleGroup.js:17:17]
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:08:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:24 [I] cache.go 348: Refresh cache {class}...
2021/01/14 18:09:24 [I] cache.go 399: Refresh cache: Classes, ClassFields, ClassTTL.
2021/01/14 18:09:24 [I] cache.go 480: ------Finish Cache------
2021/01/14 18:09:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:25 [I] util.go 276: Send schema change notify, cache type: class, change value: int_4_255_965405791
2021/01/14 18:09:26 [I] util.go 209: Receive schema change notify.
2021/01/14 18:09:26 [I] util.go 209: Receive schema change notify.
2021/01/14 18:09:26 [I] util.go 209: Receive schema change notify.
2021/01/14 18:09:26 [I] util.go 219: Refresh cache type: class
2021/01/14 18:09:26 [I] cache.go 348: Refresh cache {class}...
2021/01/14 18:09:26 [I] cache.go 399: Refresh cache: Classes, ClassFields, ClassTTL.
2021/01/14 18:09:26 [I] util.go 219: Refresh cache type: class
2021/01/14 18:09:26 [I] cache.go 348: Refresh cache {class}...
2021/01/14 18:09:26 [I] cache.go 399: Refresh cache: Classes, ClassFields, ClassTTL.
2021/01/14 18:09:26 [I] util.go 219: Refresh cache type: class
2021/01/14 18:09:26 [I] util.go 231:  is self, skip, don't refresh .
2021/01/14 18:09:26 [I] cache.go 480: ------Finish Cache------
2021/01/14 18:09:26 [I] cache.go 480: ------Finish Cache------
2021/01/14 18:09:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:56 [I] auth.go 133: hdim.huidutech login success. Redirect to uri: /
2021/01/14 18:09:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:56 [I] home.go 65: Go to user home page: /home
2021/01/14 18:09:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:09:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:29 [I] setting.go 72: User 'huidutech' set home page: home
2021/01/14 18:10:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:10:39 [I] setting.go 72: User 'huidutech' set home page: home
2021/01/14 18:11:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:45 [I] auth.go 133: hdim.admin login success. Redirect to uri: /
2021/01/14 18:11:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:45 [I] home.go 65: Go to user home page: /home
2021/01/14 18:11:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:11:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:36 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:19:17:  update /matrix/portal/tools set _group = _group + {"list":["/涉羟前台"]} where id = '10594627790554772188'
2021/01/14 18:12:36 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:29:13:  update /matrix/group set sapp = sapp + {"10594627790554772188":"[\"list\"]"} where id in ('1334453468253574170')
2021/01/14 18:12:36 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:29:13:  update /matrix/group set sapp = sapp - {"14571201506270844621":"[]"} where id in ('1334453468253574170')
2021/01/14 18:12:36 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:29:13:  update /matrix/group set sapp = sapp - {"14571201506270844621":"[]"} where id in ('1334453468253574170')
2021/01/14 18:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:12:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:19:17:  update /matrix/portal/tools set _group = _group + {"add":["/涉羟前台"]} where id = '10594627790554772188'
2021/01/14 18:13:00 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:19:17:  update /matrix/portal/tools set _group = _group + {"delete":["/涉羟前台"]} where id = '10594627790554772188'
2021/01/14 18:13:00 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:19:17:  update /matrix/portal/tools set _group = _group + {"edit":["/涉羟前台"]} where id = '10594627790554772188'
2021/01/14 18:13:00 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:19:17:  update /matrix/portal/tools set _group = _group + {"list":["/涉羟前台"]} where id = '10594627790554772188'
2021/01/14 18:13:00 [I] wjs.go 145: /matrix/system/updateGroupByApp.js:29:13:  update /matrix/group set sapp = sapp + {"10594627790554772188":"[\"add\",\"delete\",\"edit\",\"list\"]"} where id in ('1334453468253574170')
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:27 [I] auth.go 133: hdim.huidutech login success. Redirect to uri: /
2021/01/14 18:13:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:27 [I] home.go 65: Go to user home page: /home
2021/01/14 18:13:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:13:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:17:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:22:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:22:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:23:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:26:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:26:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:26:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:53:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:53:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:53:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:53:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:53:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:52 [I] auth.go 133: hdim.admin login success. Redirect to uri: /
2021/01/14 18:54:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:52 [I] home.go 65: Go to user home page: /home
2021/01/14 18:54:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:54:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:55:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:56:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:56:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:56:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:56:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:58:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:58:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:58:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:58:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:58:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:01 [I] modb.go 723: Export class /matrix/entity/phonenumber
2021/01/14 18:59:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:12 [I] modb.go 723: Export class /matrix/entity/phone
2021/01/14 18:59:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 18:59:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:00:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:02:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:02:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:02:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:04:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:04:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:04:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:04:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:04:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:04:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:07:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:08:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:08:05 [I] fs.go 322: Rename file /assets/images/entity/png/新文件夹_1581765237737 to /assets/images/entity/png/people POST
2021/01/14 19:08:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:57 [I] fs.go 287: Upload file /assets/images/entity/png/people/woman.png POST
2021/01/14 19:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:57 [I] fs.go 287: Upload file /assets/images/entity/png/people/man.png POST
2021/01/14 19:10:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:57 [I] fs.go 287: Upload file /assets/images/entity/png/people/oman.png POST
2021/01/14 19:10:58 [I] fs.go 292: Upload file /assets/images/entity/png/people/woman.png finished.
2021/01/14 19:10:58 [W] fs.go 816: Index file error: unsupported index type
2021/01/14 19:10:58 [I] fs.go 292: Upload file /assets/images/entity/png/people/man.png finished.
2021/01/14 19:10:58 [W] fs.go 816: Index file error: unsupported index type
2021/01/14 19:10:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:58 [I] fs.go 292: Upload file /assets/images/entity/png/people/oman.png finished.
2021/01/14 19:10:58 [W] fs.go 816: Index file error: unsupported index type
2021/01/14 19:10:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:10:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:11:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:12:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:14:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:10 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:15:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:20 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:16:20 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:16:21 [I] dfs_index.go 152: Index file /script/matrix/graph/graph_service.js
2021/01/14 19:16:21 [I] fs.go 77: Write attr: {}
2021/01/14 19:16:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:16:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:17:54 [W] query_util.go 869: can't find class for id[hotel:盐城锦江之星市区店] , search subdix of class!
2021/01/14 19:18:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:40 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:18:40 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        log.debug(rtn)
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:18:40 [I] dfs_index.go 152: Index file /script/matrix/graph/graph_service.js
2021/01/14 19:18:40 [I] fs.go 77: Write attr: {}
2021/01/14 19:18:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:47 [W] query_util.go 869: can't find class for id[hotel:盐城锦江之星市区店] , search subdix of class!
2021/01/14 19:18:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:18:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:19 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:19:19 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        dfs.write("/script/matrix/graph/log.log",JSON.stringify(rtn))
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:19:19 [I] dfs_index.go 152: Index file /script/matrix/graph/graph_service.js
2021/01/14 19:19:19 [I] fs.go 77: Write attr: {}
2021/01/14 19:19:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:43 [I] fs.go 38: Write file (log) /script/matrix/graph/log.log PUT
2021/01/14 19:19:43 [I] fs.go 56: Write data: null
2021/01/14 19:19:44 [I] dfs_index.go 152: Index file /script/matrix/graph/log.log
2021/01/14 19:19:44 [I] fs.go 77: Write attr: {"remark":"","ctime":1610623529429,"author":"admin"}
2021/01/14 19:19:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:19:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:20:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:20:00 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:20:00 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        dfs.write("/script/matrix/graph/log.log",JSON.stringify(rtn))
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:20:00 [I] dfs_index.go 152: Index file /script/matrix/graph/graph_service.js
2021/01/14 19:20:00 [I] fs.go 77: Write attr: {}
2021/01/14 19:20:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:20:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:20:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:20:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:37 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:21:37 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        dfs.write("/script/matrix/graph/log.log",'JSON.stringify(rtn)')
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:21:37 [I] dfs_index.go 152: Index file /script/matrix/graph/graph_service.js
2021/01/14 19:21:37 [I] fs.go 77: Write attr: {}
2021/01/14 19:21:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:21:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:08 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:22:08 [I] fs.go 56: Write data: //var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        dfs.write("/script/matrix/graph/log.log",'JSON.stringify(rtn)')
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:22:08 [I] dfs_index.go 152: Index file /script/matrix/graph/graph_service.js
2021/01/14 19:22:08 [I] fs.go 77: Write attr: {}
2021/01/14 19:22:08 [E] batch.go 73: cql =[INSERT INTO object JSON ? DEFAULT UNSET], params=[[{"_tokens":{"_fields":"\u00002020-11-07 09:15:18\u0000{}\u000015590211842812583004\u00000\u0000/script/matrix/graph/graph_service.js\u00002021-01-14\u00002021-01-14 11:22:08\u0000graph_service.js\u00001610623328814\u0000/script/matrix/graph\u0000/matrix/filesystem\u0000js","_raw":""},"class":"/matrix/filesystem","day":"2021-01-14","id":"15590211842812583004","list_bigint_0":[-7076573335733547168],"list_bigint_1":[],"map_varchar_set_0":null,"map_varchar_set_1":null,"map_varchar_set_10":null,"map_varchar_set_11":null,"map_varchar_set_12":null,"map_varchar_set_13":null,"map_varchar_set_14":null,"map_varchar_set_15":null,"map_varchar_set_16":null,"map_varchar_set_19":null,"map_varchar_set_2":null,"map_varchar_set_20":null,"map_varchar_set_21":null,"map_varchar_set_22":null,"map_varchar_set_23":null,"map_varchar_set_24":null,"map_varchar_set_25":null,"map_varchar_set_3":null,"map_varchar_set_4":null,"map_varchar_set_5":null,"map_varchar_set_6":null,"map_varchar_set_7":null,"map_varchar_set_8":null,"map_varchar_set_9":null,"name":"graph_service.js","smallint_0":0,"tags":[],"timestamp_2":"2021-01-14T11:22:08.1Z","timestamp_3":"2020-11-07T09:15:18.336Z","varchar_19":"/script/matrix/graph","varchar_2":"","varchar_20":"/script/matrix/graph/graph_service.js","varchar_33":"js","varchar_34":"{}","varchar_394":null,"varchar_396":null,"vtime":1610623328814}]], err=[Error decoding JSON value for timestamp_2: Unable to coerce '2021-01-14T11:22:08.1Z' to a formatted date (long)]
2021/01/14 19:22:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:22:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:23:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:23:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:23:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:25:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:25:24 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:25:24 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        dfs.write("/script/matrix/graph/log.log",'JSON.stringify(rtn)')
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:25:24 [I] dfs_index.go 152: Index file /script/matrix/graph/graph_service.js
2021/01/14 19:25:24 [I] fs.go 77: Write attr: {}
2021/01/14 19:28:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:54 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:28:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:09 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:29:09 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        dfs.write("/script/matrix/graph/log.log",'JSON.stringify(rtn)')
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:29:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:09 [I] fs.go 590: Sync file to local /script/matrix/graph/graph_service.js POST
2021/01/14 19:29:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:27 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:40 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:29:40 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        dfs.write("/script/matrix/graph/log.log",JSON.stringify(rtn))
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:29:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:40 [I] fs.go 590: Sync file to local /script/matrix/graph/graph_service.js POST
2021/01/14 19:29:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:29:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:25 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:30:25 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                dfs.write("/script/matrix/graph/log.log",JSON.stringify(v))
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:30:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:26 [I] fs.go 590: Sync file to local /script/matrix/graph/graph_service.js POST
2021/01/14 19:30:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:33 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:30:33 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                dfs.write("/script/matrix/graph/log.log",JSON.stringify(v))
                v._icon === 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:30:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:33 [I] fs.go 590: Sync file to local /script/matrix/graph/graph_service.js POST
2021/01/14 19:30:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:30:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:31:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:31:20 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:31:20 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                dfs.write("/script/matrix/graph/log.log",JSON.stringify(v))
                v._icon = 'people/man'
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:31:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:31:20 [I] fs.go 590: Sync file to local /script/matrix/graph/graph_service.js POST
2021/01/14 19:31:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:31:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:31:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:02 [I] fs.go 38: Write file (js) /script/matrix/graph/graph_service.js PUT
2021/01/14 19:32:02 [I] fs.go 56: Write data: var input = decodeURIComponent(INPUT).trim();

var words = [
    '查询所有应用的关联信息',
    '查询应用wecise的关联信息',
    '查询所有业务的关联信息',
    '查询查账系统的关联信息',
    '数字国网的关联信息',
    '运行在linux服务器wecise上的服务',
            'cassandra',
            '集群',
            'DB2',
            'vmware',
            'etcd',
            'HA',
            'http',
            'linux',
            'mysql',
            '队列',
            'oracle',
            'pod',
            '路由器',
            'san存储',
            'san交换机',
            '交换机',
            'tomcat',
            'weblogic'
];
var syntax = [
    'match ("app:*") <- [*1]-()',
    'match ("app:web_wecise") - [*1]->()',
    'match ("biz:*") - [*1]->()',
    'match ("biz:查账系统") - [*1]->()',
    'match ("biz:数字国网") - [*1]->()',
    'match ()-[*]->("linux:wecise")',
                'cassandra',
                'cluster',
                'db2',
                'esx',
                'etcd',
                'ha',
                'http',
                'linux',
                'mysql',
                'nats',
                'oracle',
                'pod',
                'router',
                'sanstorage',
                'sanswitch',
                'switch',
                'tomcat',
                'weblogic'
];

// 根据ID获取实体信息
var getEntity = function(ids){
    
    try {
        return odb.mql("select id,class,name from /matrix/entity/ where id in " + ids + " limit -1").data;
    } catch(err){
        return []
    }
}

var bak = (function(){
    var template = [{
                  "graph": {
                    "nodes": [],
                    "edges": [],
                    "paths": null,
                    "diff": null,
                    "pathtags": null
                  }
                }];
    try{
        var tmp = input.slice(input.indexOf("(")+1,input.indexOf(")")).replace(/"/g,"").split(",");
        var nodes = getEntity("('"+tmp.join("','")+"')");
        
        return  [{graph:_.extend(template[0].graph, {nodes:_.map(nodes,function(v){
                    return {_icon: _.last(v.class.split("/")),class: v.class, id: v.id};
                })})}]
    }catch(err){
        return [];
    }
})()


//hashcode
var hashCode = function(str){
    return str.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
}


var s = (function(param){
    var rtn = null;
    try{
        
        var idx = -1;
        
        _.forEach(words,function(v,index){
            if(v.search(input) != -1){
                idx = index;
            }
        })
        
        if(idx == -1){
            rtn = odb.mql(param).data;
        } else {
            rtn = odb.mql(syntax[idx]).data;
        }
        
        // 结果处理
        _.forEach(rtn[0].graph.Nodes,function(v){
            if(v._icon === 'people'){
                v._icon = 'people/man';
            }
        })
        
        if(_.isEmpty(rtn)){
            rtn = bak;
        }
    } catch(err){
        rtn = bak;
    } finally{
        // 缓存搜索语句
        var name = hashCode(input);
        var account = webcontext.user();
        var hisFile = "/home/"+account.username + "/Documents/history/graph-match-history.json";
        var tmp = JSON.parse(dfs.read(hisFile)) || [];
        var index = _.findIndex(tmp,{name:name});
        
        // limit 30
        if(tmp.lenght > 20) tmp.slice(1);
        
        if(index === -1){
            tmp.push({name:name,value:input,ctime:_.now()});
        } else {
            tmp = _.reject(tmp,{name:name});
            tmp.push({name:name,value:input,ctime:_.now()});
        }
        dfs.write(hisFile,JSON.stringify(tmp,null,2))
    }
  
    return rtn;
})(input);

OUTPUT = s;
2021/01/14 19:32:02 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:02 [I] fs.go 590: Sync file to local /script/matrix/graph/graph_service.js POST
2021/01/14 19:32:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:32:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:34 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:46 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:33:56 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:34:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:38:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:44:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:44:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:45:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:45:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:47:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:47:15 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:47:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:47:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:47:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:47:25 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:48:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:48:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:48:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:48:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:50:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:50:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:51:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:51:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:51:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:51:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:51:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:51:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:52:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:52:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:55:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:55:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:38 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:39 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:48 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:49 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:56:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:57:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:57:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:57:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:57:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:57:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:57:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:12 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 19:59:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:37 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:00:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:02:28 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:02:29 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:02:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:02:57 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:03:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:01 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:03 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:07 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:04:21 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:05:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:05:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:13 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:45 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:10:58 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:11:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:11:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:11:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:11:26 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:36 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:53 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:13:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:14:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:14:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:08 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:17 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:18 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:19 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:20 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:35 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:52 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:15:59 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:16:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:16:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:16:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:16:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:16:06 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:11 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:24 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:19:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:00 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:04 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:14 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:22 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:47 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:50 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:51 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:20:55 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:21:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:21:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:21:05 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:21:09 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:27:23 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:27:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:27:30 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:28:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:28:43 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:33:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:34:16 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:34:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:34:31 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:35:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:35:32 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:35:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:35:33 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:40 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:41 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:42 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:44 [W] context.go 464: verify license failed: The license expired
2021/01/14 20:55:44 [W] context.go 464: verify license failed: The license expired
